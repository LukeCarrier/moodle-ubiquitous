#!/bin/bash

#
# Ubiquitous Moodle
#
# @author Luke Carrier <luke@carrier.im>
# @copyright 2016 Luke Carrier
#

set -euo pipefail
IFS=$'\n\t'

shopt -s extglob
shopt -s nullglob

UBIQUITOUS_PREFIX="/usr/local/ubiquitous"
UBIQUITOUS_BIN="${UBIQUITOUS_PREFIX}/bin"
UBIQUITOUS_INSTALL_CONFIG="${UBIQUITOUS_BIN}/ubiquitous-install-config-%s"
UBIQUITOUS_PLATFORMS="${UBIQUITOUS_PREFIX}/etc/ubiquitous-platforms"

UBIQUITOUS_RELEASES_DIR="%s/releases"
UBIQUITOUS_CURRENT_LINK="%s/current"

UBIQUITOUS_NGINX_LINK="/etc/nginx/sites-enabled/%s.conf"
UBIQUITOUS_NGINX_DIR="/etc/nginx/sites-available"
UBIQUITOUS_NGINX_CONF="${UBIQUITOUS_NGINX_DIR}/%s.%s.conf"

UBIQUITOUS_PHPFPM_SERVICE="php7.0-fpm"
UBIQUITOUS_PHPFPM_LINK_FMT="/etc/php/7.0/fpm/pools-enabled/%s.conf"
UBIQUITOUS_PHPFPM_LINK_GLOB="/etc/php/7.0/fpm/pools-enabled/%s.+(blue|green).conf"
UBIQUITOUS_PHPFPM_DIR="/etc/php/7.0/fpm/pools-available"
UBIQUITOUS_PHPFPM_CONF="${UBIQUITOUS_PHPFPM_DIR}/%s.%s.conf"
UBIQUITOUS_PHPFPM_SOCK="/var/run/php/php7.0-fpm-%s.sock"

ERROR_PARAMS=1
ERROR_STATE=2

SYMLINK_NOT_PRESENT=1
SYMLINK_TARGET_NOT_PRESENT=2
SYMLINK_TARGET_INVALID_PARENT=2

abort() {
    local status="$1"
    local message="$2"

    echo "$message" >&2
    exit "$status"
}

require_root() {
    if [ "$USER" != "root" ]; then
        abort $ERROR_PARAMS "you must be root"
    fi
}

require_platform() {
    local domain="$1"

    local raw
    local phpfpm_link_glob

    if [ -z "$domain" ]; then
        abort $ERROR_PARAMS "no domain supplied"
    fi

    set +e
    raw="$(grep -E "^${domain}:" "$UBIQUITOUS_PLATFORMS")"
    if [ $? -ne 0 ]; then
        abort $ERROR_PARAMS "supplied domain '${domain}' doesn't exist"
    fi
    set -e

    # Configuration items in the platforms file, written by Salt
    platform_domain="$(echo "$raw" | cut -d: -f1)"
    platform_basename="$(echo "$raw" | cut -d: -f2)"
    platform_role="$(echo "$raw" | cut -d: -f3)"
    platform_user="$(echo "$raw" | cut -d: -f4)"
    platform_home="$(echo "$raw" | cut -d: -f5)"

    # Ensure that platform role is valid
    platform_install_config_script="$(printf "$UBIQUITOUS_INSTALL_CONFIG" "$platform_role")"
    if [ ! -x "$platform_install_config_script"]
        abort $ERROR_PARAMS "invalid platform role '${platform_role}'"
    fi

    # Paths derived from the home directory and basename
    platform_releases_dir="$(printf "$UBIQUITOUS_RELEASES_DIR" "$platform_home")"
    platform_current_link="$(printf "$UBIQUITOUS_CURRENT_LINK" "$platform_home")"
    platform_current_nginx_link="$(printf "$UBIQUITOUS_NGINX_LINK" "$platform_basename")"
    phpfpm_link_glob="$(printf "$UBIQUITOUS_PHPFPM_LINK_GLOB" "$platform_basename")"
    platform_current_phpfpm_link=($phpfpm_link_glob)
    if [ -z ${platform_current_phpfpm_link+x} ]; then
        platform_current_phpfpm_link='<invalid (no link)>'
    fi

    if [ ! -d "$platform_releases_dir" ]; then
        abort $ERROR_STATE "release directory '${platform_releases_dir}' doesn't exist"
    fi

    # Current environment state
    set +e
    platform_current_release_target="$(resolve_symlink "$platform_current_link" "$platform_releases_dir")"
    platform_current_release_state="$?"
    platform_current_nginx_config_target="$(resolve_symlink "$platform_current_nginx_link" "$UBIQUITOUS_NGINX_DIR")"
    platform_current_nginx_config_state="$?"
    platform_current_phpfpm_config_target="$(resolve_symlink "$platform_current_phpfpm_link" "$UBIQUITOUS_PHPFPM_DIR")"
    platform_current_phpfpm_config_state="$?"
    set -e
}

resolve_symlink() {
    local symlink="$1"
    local expect_parent="$2"

    local target
    if [ -L "$symlink" ]; then
        target="$(readlink -fn "$symlink")"
        if [ -z "$expect_parent" ] || [[ "$target" == "$expect_parent"/* ]]; then
            if [ -e "$target" ]; then
                echo "$target"
                exit 0
            else
                echo "$target"
                exit $SYMLINK_TARGET_NOT_PRESENT
            fi
        else
            echo "$target"
            exit $SYMLINK_TARGET_INVALID_PARENT
        fi
    else
        exit $SYMLINK_NOT_PRESENT
    fi
}

print_symlink() {
    local target=$1
    local state=$2

    case $state in
        0)
            echo "$target"
            ;;
        $SYMLINK_NOT_PRESENT)
            echo "<invalid (not a symlink)>"
            ;;
        $SYMLINK_TARGET_NOT_PRESENT)
            echo "<invalid (target '${target}' doesn't exist)>"
            ;;
        $SYMLINK_TARGET_INVALID_PARENT)
            echo "<invalid (target '${target}' outside of expected parent)>"
            ;;
        *)
            echo "<invalid (reason unknown)>"
            ;;
    esac
}

other_instance() {
    local instance="$1"

    case "$instance" in
        blue)
            echo "green"
            ;;
        green)
            echo "blue"
            ;;
        *)
            abort $ERROR_PARAMS "unknown instance '${$instance}'"
            ;;
    esac
}

phpfpm_resolve_instance_config() {
    local basename="$1"
    local instance="$2"

    printf "$UBIQUITOUS_PHPFPM_CONF" "$basename" "$instance"
}

phpfpm_resolve_instance_link() {
    local basename="$1"
    local instance="$2"

    printf "$UBIQUITOUS_PHPFPM_LINK_FMT" "${basename}.${instance}"
}

phpfpm_resolve_instance() {
    local basename="$1"

    local phpfpm_link_glob="$(printf "$UBIQUITOUS_PHPFPM_LINK_GLOB" "$basename")"
    local phpfpm_link=($phpfpm_link_glob)
    local config_basename="$(basename -s .conf $phpfpm_link)"

    echo "$config_basename" | sed 's/.*\.//'
}

phpfpm_resolve_socket() {
    local basename="$1"
    local instance="$2"

    printf "$UBIQUITOUS_PHPFPM_SOCK" "${basename}.${instance}"
}

phpfpm_resolve_socket_link() {
    local basename=$1

    printf "$UBIQUITOUS_PHPFPM_SOCK" "$basename"
}

phpfpm_disable_instance() {
    local basename="$1"
    local instance="$2"
    local reload="$3"

    local source="$(phpfpm_resolve_instance_config "$basename" "$instance")"
    local link="$(phpfpm_resolve_instance_link "$basename" "$instance")"

    rm -f "$link"
    if [ "$reload" != "0" ]; then
        systemctl reload "$UBIQUITOUS_PHPFPM_SERVICE"
    fi
}

phpfpm_enable_instance() {
    local basename="$1"
    local instance="$2"
    local reload="$3"

    local source="$(phpfpm_resolve_instance_config "$basename" "$instance")"
    local link="$(phpfpm_resolve_instance_link "$basename" "$instance")"

    ln -sfn "$source" "$link"
    if [ "$reload" != "0" ]; then
        systemctl reload "$UBIQUITOUS_PHPFPM_SERVICE"
    fi
}

phpfpm_set_current_instance() {
    local basename="$1"
    local instance="$2"

    local source="$(phpfpm_resolve_socket "$basename" "$instance")"
    local link="$(phpfpm_resolve_socket_link "$basename")"

    ln -sfn "$source" "$link"
}
